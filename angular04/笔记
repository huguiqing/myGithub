1、ng-app=" "  定义angularJS的使用范围；

2、ng-init="变量=值;变量='值'"  初始化变量的值，有多个变量时，中间用分号隔开；

3、ng-model="变量"  定义变量名；

4、ng-bind="变量"  绑定变量名，获取该变量的数据。这里的变量就是第3条的变量名。但是一般都用双重花括号来获取变量的值，比如：{{变量}}。

5、angular路由：
$routeProvider.when(url,{
    template:string, //在ng-view中插入简单的html内容
    templateUrl:string, //在ng-view中插入html模版文件
    controller:string,function / array, //在当前模版上执行的controller函数
    controllerAs:string, //为controller指定别名
    redirectTo:string,function, //重定向的地址
    resolve:object<key,function> //指定当前controller所依赖的其他模块
});
    1）载入了实现路由的 js 文件：angular-route.js。
    2）包含了 ngRoute 模块作为主应用模块的依赖模块。angular.module('routingDemoApp',['ngRoute'])
    3）使用 ngView 指令。<div ng-view></div>
6、使用 .directive 函数来添加自定义的指令。
    app.directive("runoobDirective", function() {
        return {
            template : "<h1>自定义指令!</h1>"
        };
    });
    restrict 值可以是以下几种:
    E 作为元素名使用，A 作为属性使用，C 作为类名使用，M 作为注释使用
7、ng-module
    <form ng-app="" name="myForm" ng-init="myText = 'test@runoob.com'">
        Email:
        <input type="email" name="myAddress" ng-model="myText" required></p>
        <h1>状态</h1>
        {{myForm.myAddress.$valid}}   /*这里是用表单和input的name来获取*/
        {{myForm.myAddress.$dirty}}
        {{myForm.myAddress.$touched}}
    </form>
    /////////////////////////////////////////
    <style>
        input.ng-invalid {
            background-color: lightblue;/*当input输入不合法时，这个背景颜色会出现*/
        }
    </style>
    <body>
    <form ng-app="" name="myForm">
        输入你的名字:
        <input name="myAddress" ng-model="text" required>
    </form>
    //////////////////////////////
    ng-invalid:未通过验证的表单
    ng-valid:布尔型属性，它指示表单是否通过验证。如果表单当前通过验证，他将为true
    ng-dirty:布尔值属性，表示用户是否修改了表单。如果为 ture，表示有修改过；false 表示修没有修改过
    ng-touched:布尔值属性，表示用户是否和控件进行过交互
    ng-pristine:布尔值属性，表示用户是否修改了表单。如果为ture，表示没有修改过；false表示修改过
8、根作用域：$rootScope
    $rootScope 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。
    06.$rootScope.html,$rootScope 在循环对象内外都可以访问。
9、控制器 ng-controller
    app.controller('myCtrl', function($scope) {
        $scope.firstName = "John";
        $scope.lastName = "Doe";
    });
    外部文件中的控制器:
    在大型的应用程序中，通常是把控制器存储在外部文件中。
    只需要把 <script> 标签中的代码复制到名为 personController.js 的外部文件中即可
    参考 07-外围控制器.html
10、过滤器：
    currency	格式化数字为货币格式。filter	从数组项中选择一个子集。
    lowercase	格式化字符串为小写。orderBy	根据某个表达式排列数组。
    uppercase	格式化字符串为大写。
    <p>总价 = {{ (quantity * price) | currency }}</p>
    1）向指令添加过滤器：
    <li ng-repeat="x in names | orderBy:'country'">
        {{ x.name + ', ' + x.country }}
    </li>
    2）过滤输入：08-过滤输入.html
    3)自定义过滤器,过滤器 reverse，将字符串反转.09-自定义过滤器.html
11、service：(服务是一个函数或对象，可在你的 AngularJS 应用中使用)!!!
    1）$location服务
    var app = angular.module('myApp', []);
        app.controller('customersCtrl', function($scope, $location) {
        $scope.myUrl = $location.absUrl();
    });
    2)$http 服务
    app.controller('myCtrl', function($scope, $http) {
        $http.get("welcome.htm").then(function (response) {
            $scope.myWelcome = response.data;
        });
    });
    3)$timeout 服务  10-$timeout.html
    app.controller('myCtrl', function($scope, $timeout) {
        $scope.myHeader = "Hello World!";
        $timeout(function () {
            $scope.myHeader = "How are you today?";
        }, 2000);
    });
    4)$interval 服务 相当于setInterval
    5）创建自定义服务  12-自定义服务.html  //服务就是一个对象或者函数
    app.service('hexafy', function() {
        this.myFunc = function (x) {
            return x.toString(16);
        }
    });
    app.controller('myCtrl', function($scope, hexafy) {
        $scope.hex = hexafy.myFunc(255);
    });
12、git
    git pull
    git status //查看清楚有没有不需要提交的文件，或者是无意间修改的文件
    git add .
    git commit -m 'message'
    git pull
    git push
    git pull = git fetch + git merge
    git clone
    git log
    git push github master
    git push gitee master
    git remote add origin git@gitee.com:liaoxuefeng/learngit.git
    git push错误failed to push some refs to的解决:git pull --rebase origin master
        因为远程库与本地库不一致造成的，那么我们把远程库同步到本地库就可以了.
        把远程库中的更新合并到本地库中，–rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中
        origin是根据不同来设置的，有可能是GitHub或是gitee。
    https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/

















